# Select a series at random
filter(`Series ID` == sample(`Series ID`,1))
myseries %>%
autoplot() +
labs(title="Aus Retail turnover",
x="Month",
y="Revenue($Million AUD)")
?aus_retail
myseries %>%
gg_season(Turnover, labels = "both") +
labs(y = "$ (millions)",
title = "Seasonal plot: Australian Retail Revenue")
lambda <- 0.8
myseries %>%
autoplot(box_cox(Turnover, lambda = 0.8)) +   #play around with lambda
labs(y = "$ (millions)",
title = latex2exp::TeX(paste0(
"Transformed Aus Retail turnover with $\\lambda$ = ",
round(lambda,2))))
myseries %>%
autoplot(box_cox(Turnover, 0.4))  #taking lambda as 0.4
myseries %>%
autoplot(box_cox(Turnover, 1.0))  #taking lambda as 1.0
myseries %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
fit_ETS <- myseries %>%
model(
additive = ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("M")),
multiplicative = ETS(box_cox(Turnover, 0.8) ~ error("M") + trend("A") + season("M")),
auto = ETS(box_cox(Turnover, 0.8))
)
fit_ETS %>%
select(additive) %>%
report()
fit_ETS %>%
select(multiplicative) %>%
report()
fit_ETS %>%
select(auto) %>%
report()
myseries1 <- myseries %>%
slice(1:417)   #training set
fit_ETS_test <- myseries1 %>%
model(
additive = ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("M")),
multiplicative = ETS(box_cox(Turnover, 0.8) ~ error("M") + trend("A") + season("M")),
auto = ETS(box_cox(Turnover, 0.8))
)
fc <- fit_ETS_test %>%
fabletools::forecast(h = "2 years")   #to forecast on the test data for 2 years ahead
fabletools::accuracy(fit_ETS_test)
lambda <- 0.8
myseries %>%
autoplot(box_cox(Turnover, lambda = 0.8)) +   #play around with lambda
labs(y = "$ (millions)",
title = latex2exp::TeX(paste0(
"Transformed Aus Retail turnover with $\\lambda$ = ",
round(lambda,2))))
myseries %>%
ACF(Turnover,lambda=0.8 ) %>%
autoplot()
myseries %>%
features(Turnover, feat_stl)
myseries %>%
features(Turnover, unitroot_nsdiffs)
myseries %>%
mutate(turnover=difference(Turnover, 12)) %>%
features(turnover, unitroot_ndiffs)
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)  #first order diff
)
myseries %>%
gg_tsdisplay(difference(Turnover,12) %>%
difference(1),
plot_type = "partial", lag=60) +
labs(title="Double differenced", y=" ")
myseries %>%
gg_tsdisplay(difference(Turnover,12) %>%
difference(1),
plot_type = "partial", lag=60) +
labs(title="Double differenced", y=" ")
myseries %>%
gg_tsdisplay(difference(Turnover,12) %>%
difference(1),
plot_type = "partial", lag=60) +
labs(title="Double differenced", y=" ")
fit_arima1 <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8) ~ pdq(2,1,0) + PDQ(3,1,0)))
report(fit_arima1)
fit_arima2 <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8) ~ pdq(0,1,1) + PDQ(0,1,1)))
report(fit_arima2)
fit_auto <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8)))
report(fit_auto)
fit_arima_test <- myseries1 %>%
model (
ar1 = ARIMA(box_cox(Turnover, 0.8) ~ pdq(2,1,0) + PDQ(3,1,0)),
ar2 = ARIMA(box_cox(Turnover, 0.8) ~  pdq(0,1,1) + PDQ(0,1,1)),
auto = ARIMA(box_cox(Turnover, 0.8))
)
fc_ar <- fit_arima_test %>%
fabletools::forecast(h = "2 years")   #to forecast on the test data for 2 years ahead
fabletools::accuracy(fit_arima_test)
fit_best_ETS <- fit_ETS %>%
select(auto)
report(fit_best_ETS)
report(fit_arima2)
fit_best_ETS %>%
gg_tsresiduals(lag=36)
#Ljung-Box test
fit_best_ETS|>
augment() |>
features(.innov, ljung_box, lag = 8)  #choosing lag value = 8 as from ACF plot we can see number of significant spikes = 7 and plus 1
fit_arima2 %>%
gg_tsresiduals(lag=36)
#Ljung-Box test
fit_arima2|>
augment() |>
features(.innov, ljung_box, lag = 3, dof=2)  #choosing lag value = 3 as from ACF plot we can see number of significant spikes = 2 and plus 1 and dof =2 for 2 parameters
forecast(fit_best_ETS, h=36) %>%
autoplot() +
labs(title="Aus Retail turnover- ETS forecast",
x="Month",
y="Revenue($Million AUD)")
forecast(fit_arima2, h=36) %>%
autoplot() +
labs(title="Aus Retail turnover- ARIMA forecast",
x="Month",
y="Revenue($Million AUD)")
fit_ets_final <- fit_ETS_test %>%
select(model="auto") %>%
fabletools::forecast(h = "2 years")
fabletools::accuracy(fit_ets_final, data=myseries)
fit_ets_final <- fit_ETS_test %>%
select(model="auto") %>%
fabletools::forecast(h = "2 years")
fabletools::accuracy(fit_ets_final, data=myseries)
fit_arima_final <- fit_arima_test %>%
select(model="ar2") %>%
fabletools::forecast(h = "2 years")
fabletools::accuracy(fit_arima_final, data=myseries)
fit2_ets <- myseries %>%
model(
ets=ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("A"))
) %>%
forecast(h="2 years", level=80)   #2 years past the end of data with 80% prediction interval
fit2_ets %>%
autoplot(myseries)
fit2_arima <- myseries %>%
model(
arima=ARIMA(box_cox(Turnover, 0.8) ~  pdq(0,1,1) + PDQ(0,1,1))
) %>%
forecast(h="2 years", level=80)
fit2_arima %>%  #2 years past the end of data with 80% prediction interval
autoplot(myseries)
updated_data <- read_excel("8501011.xls", sheet = "Data1", skip = 9) |>
select(Month = `Series ID`, Turnover = myseries$`Series ID`[1]) |>
mutate(
Month = yearmonth(Month),
State = myseries$State[1],
Industry = myseries$Industry[1]
) |>
as_tsibble(index = Month, key = c(State, Industry))
forecast_actual <- updated_data %>%
slice(442:465)
forecast_ets <- fit2_ets$.mean
forecast_arima <- fit2_arima$.mean
comparison_data <- data.frame(ETS_Forecast = forecast_ets, ARIMA_Forecast = forecast_arima, Actual = forecast_actual)
head(comparison_data,10)  #showing first 10 rows of the data
updated_data <- read_excel("8501011.xls", sheet = "Data1", skip = 9) |>
select(Month = `Series ID`, Turnover = myseries$`Series ID`[1]) |>
mutate(
Month = yearmonth(Month),
State = myseries$State[1],
Industry = myseries$Industry[1]
) |>
as_tsibble(index = Month, key = c(State, Industry))
forecast_actual <- updated_data %>%
slice(442:465)
forecast_ets <- fit2_ets$.mean
forecast_arima <- fit2_arima$.mean
comparison_data <- data.frame(ETS_Forecast = forecast_ets, ARIMA_Forecast = forecast_arima, Actual = forecast_actual)
head(comparison_data,10)  #showing first 10 rows of the data
fit2_ets %>%
accuracy(forecast_actual)
fit2_arima %>%
accuracy(forecast_actual)
library(ggplot2)
library(tidyr)
# Reshape the data into a longer format
comparison_data_long <- pivot_longer(comparison_data, cols = c(ETS_Forecast, ARIMA_Forecast, Actual.Turnover),
names_to = "Model", values_to = "Value")
# Create a line plot
plot <- ggplot(data = comparison_data_long, aes(x = Actual.Month , y = Value, color = Model)) +
geom_line() +
labs(title = "Forecast Comparison",
x = "Time",
y = "Turnover") +
scale_color_manual(values = c("ETS_Forecast" = "blue", "ARIMA_Forecast" = "red", "Actual.Turnover" = "green")) +
theme_bw()
# Display the plot
plot
View(updated_data)
myseries %>%
features(Turnover, feat_stl) %>%
select(seasonal_strength_year)
fit_best_ETS %>%
gg_tsresiduals(lag=36) +
labs(title="ETS model Residuals")
myseries %>%
autoplot(box_cox(Turnover, 0.4))  + #taking lambda as 0.4
labs(y = "$ (millions)")
myseries %>%
autoplot(box_cox(Turnover, 0.4))  + #taking lambda as 0.4
labs(y = "Turnover in $(millions)")
myseries %>%
autoplot(box_cox(Turnover, 1.0)) +
labs(y = "Turnover in $(millions)") #taking lambda as 1.0
lambda <- 0.8
myseries %>%
autoplot(box_cox(Turnover, lambda = 0.8)) +   #play around with lambda
labs(y = "Revenue in $ (millions)",
title = latex2exp::TeX(paste0(
"Transformed Aus Retail turnover with $\\lambda$ = ",
round(lambda,2))))
myseries %>%
ACF(Turnover,lambda=0.8 ) %>%
autoplot()
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)  + #first order diff
labs(y = " ")
)
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)  + #first order diff
labs(y = "")
)
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)  + #first order diff
labs(y = "Turnover in $(millions)")
)
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)   #first order diff
)
fit_arima2 %>%
gg_tsresiduals(lag=36) +
labs(title="ARIMA model Residuals")
fit2_ets <- myseries %>%
model(
ets=ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("A"))
) %>%
forecast(h="2 years", level=80)   #2 years past the end of data with 80% prediction interval
fit2_ets %>%
autoplot(myseries) +
labs(title="ETS model forecast on full data")
fit2_ets <- myseries %>%
model(
ets=ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("A"))
) %>%
forecast(h="2 years", level=80)   #2 years past the end of data with 80% prediction interval
fit2_ets %>%
autoplot(myseries) +
labs(title="ETS model forecast on full data",
y = "Turnover in millions")
fit2_arima <- myseries %>%
model(
arima=ARIMA(box_cox(Turnover, 0.8) ~  pdq(0,1,1) + PDQ(0,1,1))
) %>%
forecast(h="2 years", level=80)
fit2_arima %>%  #2 years past the end of data with 80% prediction interval
autoplot(myseries) +
labs(title="ARIMA model forecast on full data",
y= "Turnover in millions")
# Reshape the data into a longer format
comparison_data_long <- pivot_longer(comparison_data, cols = c(ETS_Forecast, ARIMA_Forecast, Actual.Turnover),
names_to = "Model", values_to = "Value")
# Create a line plot
plot <- ggplot(data = comparison_data_long, aes(x = Actual.Month , y = Value, color = Model)) +
geom_line() +
labs(title = "Forecast Comparison",
x = "Time",
y = "Turnover in $(millions)") +
scale_color_manual(values = c("ETS_Forecast" = "blue", "ARIMA_Forecast" = "red", "Actual.Turnover" = "green")) +
theme_bw()
# Display the plot
plot
#libraries used in this project
library(fpp3)
library(stats)
library(fable)
library(fabletools)
library(tidyverse)
library(readxl)
library(ggplot2)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
#libraries used in this project
library(fpp3)
library(stats)
library(fable)
library(fabletools)
library(tidyverse)
library(readxl)
library(ggplot2)
library(tidyr)
set.seed(32707290)
myseries <- aus_retail |>
# Remove discontinued series
filter(!(`Series ID` %in% c("A3349561R","A3349883F","A3349499L","A3349902A",
"A3349588R","A3349763L","A3349372C","A3349450X",
"A3349679W","A3349378T","A3349767W","A3349451A"))) |>
# Select a series at random
filter(`Series ID` == sample(`Series ID`,1))
myseries %>%
autoplot() +
labs(title="Aus Retail turnover",
x="Month",
y="Revenue($Million AUD)")
myseries %>%
gg_season(Turnover, labels = "both") +
labs(y = "$ (millions)",
title = "Seasonal plot: Australian Retail Revenue")
lambda <- 0.8
myseries %>%
autoplot(box_cox(Turnover, lambda = 0.8)) +   #play around with lambda
labs(y = "$ (millions)",
title = latex2exp::TeX(paste0(
"Transformed Aus Retail turnover with $\\lambda$ = ",
round(lambda,2))))
myseries %>%
autoplot(box_cox(Turnover, 0.4))  + #taking lambda as 0.4
labs(y = "Turnover in $(millions)")
myseries %>%
autoplot(box_cox(Turnover, 1.0)) +
labs(y = "Turnover in $(millions)") #taking lambda as 1.0
myseries %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
fit_ETS <- myseries %>%
model(
additive = ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("M")),
multiplicative = ETS(box_cox(Turnover, 0.8) ~ error("M") + trend("A") + season("M")),
auto = ETS(box_cox(Turnover, 0.8))
)
fit_ETS %>%
select(additive) %>%
report()
fit_ETS %>%
select(multiplicative) %>%
report()
fit_ETS %>%
select(auto) %>%
report()
myseries1 <- myseries %>%
slice(1:417)   #training set
fit_ETS_test <- myseries1 %>%
model(
additive = ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("M")),
multiplicative = ETS(box_cox(Turnover, 0.8) ~ error("M") + trend("A") + season("M")),
auto = ETS(box_cox(Turnover, 0.8))
)
fc <- fit_ETS_test %>%
fabletools::forecast(h = "2 years")   #to forecast on the test data for 2 years ahead
fabletools::accuracy(fit_ETS_test)
lambda <- 0.8
myseries %>%
autoplot(box_cox(Turnover, lambda = 0.8)) +   #play around with lambda
labs(y = "Revenue in $ (millions)",
title = latex2exp::TeX(paste0(
"Transformed Aus Retail turnover with $\\lambda$ = ",
round(lambda,2))))
myseries %>%
ACF(Turnover,lambda=0.8 ) %>%
autoplot()
myseries %>%
features(Turnover, feat_stl) %>%
select(seasonal_strength_year)
myseries %>%
features(Turnover, unitroot_nsdiffs)
myseries %>%
mutate(turnover=difference(Turnover, 12)) %>%
features(turnover, unitroot_ndiffs)
myseries %>%
autoplot (
Turnover %>%
difference(12) %>%  #seasonal diff
difference(1)   #first order diff
)
myseries %>%
gg_tsdisplay(difference(Turnover,12) %>%
difference(1),
plot_type = "partial", lag=60) +
labs(title="Double differenced", y=" ")
fit_arima1 <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8) ~ pdq(2,1,0) + PDQ(3,1,0)))
report(fit_arima1)
fit_arima2 <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8) ~ pdq(0,1,1) + PDQ(0,1,1)))
report(fit_arima2)
fit_auto <- myseries %>%
model(ARIMA(box_cox(Turnover, 0.8)))
report(fit_auto)
fit_arima_test <- myseries1 %>%
model (
ar1 = ARIMA(box_cox(Turnover, 0.8) ~ pdq(2,1,0) + PDQ(3,1,0)),
ar2 = ARIMA(box_cox(Turnover, 0.8) ~  pdq(0,1,1) + PDQ(0,1,1)),
auto = ARIMA(box_cox(Turnover, 0.8))
)
fc_ar <- fit_arima_test %>%
fabletools::forecast(h = "2 years")   #to forecast on the test data for 2 years ahead
fabletools::accuracy(fit_arima_test)
fit_best_ETS <- fit_ETS %>%
select(auto)
report(fit_best_ETS)
report(fit_arima2)
fit_best_ETS %>%
gg_tsresiduals(lag=36) +
labs(title="ETS model Residuals")
#Ljung-Box test
fit_best_ETS|>
augment() |>
features(.innov, ljung_box, lag = 8)  #choosing lag value = 8 as from ACF plot we can see number of significant spikes = 7 and plus 1
fit_arima2 %>%
gg_tsresiduals(lag=36) +
labs(title="ARIMA model Residuals")
#Ljung-Box test
fit_arima2|>
augment() |>
features(.innov, ljung_box, lag = 3, dof=2)  #choosing lag value = 3 as from ACF plot we can see number of significant spikes = 2 and plus 1 and dof =2 for 2 parameters
forecast(fit_best_ETS, h=36) %>%
autoplot() +
labs(title="Aus Retail turnover- ETS forecast",
x="Month",
y="Revenue($Million AUD)")
forecast(fit_arima2, h=36) %>%
autoplot() +
labs(title="Aus Retail turnover- ARIMA forecast",
x="Month",
y="Revenue($Million AUD)")
fit_ets_final <- fit_ETS_test %>%
select(model="auto") %>%
fabletools::forecast(h = "2 years")
fabletools::accuracy(fit_ets_final, data=myseries)
fit_arima_final <- fit_arima_test %>%
select(model="ar2") %>%
fabletools::forecast(h = "2 years")
fabletools::accuracy(fit_arima_final, data=myseries)
fit2_ets <- myseries %>%
model(
ets=ETS(box_cox(Turnover, 0.8) ~ error("A") + trend("A") + season("A"))
) %>%
forecast(h="2 years", level=80)   #2 years past the end of data with 80% prediction interval
fit2_ets %>%
autoplot(myseries) +
labs(title="ETS model forecast on full data",
y = "Turnover in millions")
fit2_arima <- myseries %>%
model(
arima=ARIMA(box_cox(Turnover, 0.8) ~  pdq(0,1,1) + PDQ(0,1,1))
) %>%
forecast(h="2 years", level=80)
fit2_arima %>%  #2 years past the end of data with 80% prediction interval
autoplot(myseries) +
labs(title="ARIMA model forecast on full data",
y= "Turnover in millions")
updated_data <- read_excel("8501011.xls", sheet = "Data1", skip = 9) |>
select(Month = `Series ID`, Turnover = myseries$`Series ID`[1]) |>
mutate(
Month = yearmonth(Month),
State = myseries$State[1],
Industry = myseries$Industry[1]
) |>
as_tsibble(index = Month, key = c(State, Industry))
forecast_actual <- updated_data %>%
slice(442:465)
forecast_ets <- fit2_ets$.mean
forecast_arima <- fit2_arima$.mean
comparison_data <- data.frame(ETS_Forecast = forecast_ets, ARIMA_Forecast = forecast_arima, Actual = forecast_actual)
head(comparison_data,10)  #showing first 10 rows of the data
fit2_ets %>%
accuracy(forecast_actual)
fit2_arima %>%
accuracy(forecast_actual)
# Reshape the data into a longer format
comparison_data_long <- pivot_longer(comparison_data, cols = c(ETS_Forecast, ARIMA_Forecast, Actual.Turnover),
names_to = "Model", values_to = "Value")
# Create a line plot
plot <- ggplot(data = comparison_data_long, aes(x = Actual.Month , y = Value, color = Model)) +
geom_line() +
labs(title = "Forecast Comparison",
x = "Time",
y = "Turnover in $(millions)") +
scale_color_manual(values = c("ETS_Forecast" = "blue", "ARIMA_Forecast" = "red", "Actual.Turnover" = "green")) +
theme_bw()
# Display the plot
plot
